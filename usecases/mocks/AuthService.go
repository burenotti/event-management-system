// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/burenotti/rtu-it-lab-recruit/model"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: ctx, user
func (_m *AuthService) CreateToken(ctx context.Context, user *model.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: ctx, tokenString
func (_m *AuthService) ValidateToken(ctx context.Context, tokenString string) (*model.AuthPayload, error) {
	ret := _m.Called(ctx, tokenString)

	var r0 *model.AuthPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AuthPayload, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AuthPayload); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t mockConstructorTestingTNewAuthService) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
