// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/burenotti/rtu-it-lab-recruit/model"
	mock "github.com/stretchr/testify/mock"
)

// UserActivator is an autogenerated mock type for the UserActivator type
type UserActivator struct {
	mock.Mock
}

// CreateActivationToken provides a mock function with given fields: _a0, userId
func (_m *UserActivator) CreateActivationToken(_a0 context.Context, userId int64) (*model.ActivationToken, error) {
	ret := _m.Called(_a0, userId)

	var r0 *model.ActivationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.ActivationToken, error)); ok {
		return rf(_a0, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.ActivationToken); ok {
		r0 = rf(_a0, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActivationToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateActivationToken provides a mock function with given fields: _a0, token
func (_m *UserActivator) ValidateActivationToken(_a0 context.Context, token string) (*model.ActivationToken, error) {
	ret := _m.Called(_a0, token)

	var r0 *model.ActivationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.ActivationToken, error)); ok {
		return rf(_a0, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ActivationToken); ok {
		r0 = rf(_a0, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActivationToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserActivator interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserActivator creates a new instance of UserActivator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserActivator(t mockConstructorTestingTNewUserActivator) *UserActivator {
	mock := &UserActivator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
